<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JuMPチュートリアル on Juliaで数理最適化</title>
    <link>https://pallahaxi.github.io/calender_deriven_development/docs/jump/</link>
    <description>Recent content in JuMPチュートリアル on Juliaで数理最適化</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language><atom:link href="https://pallahaxi.github.io/calender_deriven_development/docs/jump/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Getting Started W Jump</title>
      <link>https://pallahaxi.github.io/calender_deriven_development/docs/jump/getting_started_w_jump/</link>
      <pubDate>Tue, 24 Aug 2021 20:42:37 +0900</pubDate>
      
      <guid>https://pallahaxi.github.io/calender_deriven_development/docs/jump/getting_started_w_jump/</guid>
      <description>JuMPのチュートリアルGetting started with JuMPを見ながら簡単なビンパッキング問題を解いたものを紹介します。該当ページとは異なる内容となりますが、Pythonの PuLP と比較しながら行います。
線形計画問題 #  まず非常に簡単な線形計画問題を1つ解いてみます。次の問題を考えます。
 PuLP (Python) #  import pulp as pp # モデル定義 model = pp.LpProblem(name=&#39;reidai&#39;, sense=pp.LpMaximize) # 決定変数を定義 x1 = pp.LpVariable(name=&#39;x1&#39;, lowBound=0, upBound=None, cat=&#39;Continuous&#39;) x2 = pp.LpVariable(name=&#39;x2&#39;, lowBound=0, upBound=None, cat=&#39;Continuous&#39;) # 目的関数を実装 model += 3*x1 + 2*x2 # 制約条件 model += 2*x1 + 5*x2 &amp;lt;= 500 model += 4*x1 + 2*x2 &amp;lt;= 300 # 解を求める model.solve() print(f&amp;quot;x1={x1.value()}, x2={x2.value()}&amp;quot;) print(f&amp;quot;売上={model.objective.value()}&amp;quot;)  結果はこのようになります。  JuMP (Julia) #  ここではソルバーとして GLPK パッケージの GLPK.</description>
    </item>
    
    <item>
      <title>The Diet Problem</title>
      <link>https://pallahaxi.github.io/calender_deriven_development/docs/jump/the_Diet_problem/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pallahaxi.github.io/calender_deriven_development/docs/jump/the_Diet_problem/</guid>
      <description>線形最適化によって、栄養基準を満たす食事を求めるチュートリアルです。</description>
    </item>
    
    <item>
      <title>Sudoku</title>
      <link>https://pallahaxi.github.io/calender_deriven_development/docs/jump/Sudoku/</link>
      <pubDate>Tue, 18 May 2021 21:09:22 +0900</pubDate>
      
      <guid>https://pallahaxi.github.io/calender_deriven_development/docs/jump/Sudoku/</guid>
      <description>数独のルールを数理最適化とみなし解くチュートリアルです</description>
    </item>
    
    <item>
      <title>Rocket Control</title>
      <link>https://pallahaxi.github.io/calender_deriven_development/docs/jump/Rocket_Control/</link>
      <pubDate>Thu, 13 May 2021 12:06:47 +0900</pubDate>
      
      <guid>https://pallahaxi.github.io/calender_deriven_development/docs/jump/Rocket_Control/</guid>
      <description>非線形最適化を用いてロケット制御問題を解くチュートリアルです</description>
    </item>
    
  </channel>
</rss>
